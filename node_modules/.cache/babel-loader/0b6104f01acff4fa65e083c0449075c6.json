{"remainingRequest":"E:\\blade\\blade\\ArcherUI\\node_modules\\babel-loader\\lib\\index.js!E:\\blade\\blade\\ArcherUI\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\blade\\blade\\ArcherUI\\src\\permission.js","dependencies":[{"path":"E:\\blade\\blade\\ArcherUI\\src\\permission.js","mtime":1592365960911},{"path":"E:\\blade\\blade\\ArcherUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\blade\\blade\\ArcherUI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\blade\\blade\\ArcherUI\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.some\";\n\n/**\r\n * 全站权限配置\r\n *\r\n */\nimport router from \"./router/router\";\nimport store from \"./store\";\nimport { validatenull } from '@/util/validate';\nimport { getToken } from '@/util/auth';\nimport NProgress from 'nprogress'; // progress bar\n\nimport 'nprogress/nprogress.css'; // progress bar style\n\nNProgress.configure({\n  showSpinner: false\n});\nvar lockPage = store.getters.website.lockPage; //锁屏页\n\nrouter.beforeEach(function (to, from, next) {\n  //缓冲设置\n  if (to.meta.keepAlive === true && store.state.tags.tagList.some(function (ele) {\n    return ele.value === to.fullPath;\n  })) {\n    to.meta.$keepAlive = true;\n  } else {\n    NProgress.start();\n\n    if (to.meta.keepAlive === true && validatenull(to.meta.$keepAlive)) {\n      to.meta.$keepAlive = true;\n    } else {\n      to.meta.$keepAlive = false;\n    }\n  }\n\n  var meta = to.meta || {};\n\n  if (getToken()) {\n    if (store.getters.isLock && to.path != lockPage) {\n      //如果系统激活锁屏，全部跳转到锁屏页\n      next({\n        path: lockPage\n      });\n    } else if (to.path === '/login') {\n      //如果登录成功访问登录页跳转到主页\n      next({\n        path: '/'\n      });\n    } else {\n      //如果用户信息为空则获取用户信息，获取用户信息失败，跳转到登录页\n      if (store.getters.token.length === 0) {\n        store.dispatch('FedLogOut').then(function () {\n          next({\n            path: '/login'\n          });\n        });\n      } else {\n        var value = to.query.src || to.fullPath;\n        var label = to.query.name || to.name;\n\n        var _meta = to.meta || router.$avueRouter.meta || {};\n\n        var i18n = to.query.i18n;\n\n        if (_meta.isTab !== false && !validatenull(value) && !validatenull(label)) {\n          store.commit('ADD_TAG', {\n            label: label,\n            value: value,\n            params: to.params,\n            query: to.query,\n            meta: function () {\n              if (!i18n) {\n                return _meta;\n              }\n\n              return {\n                i18n: i18n\n              };\n            }(),\n            group: router.$avueRouter.group || []\n          });\n        }\n\n        next();\n      }\n    }\n  } else {\n    //判断是否需要认证，没有登录访问去登录页\n    if (meta.isAuth === false) {\n      next();\n    } else {\n      next('/login');\n    }\n  }\n});\nrouter.afterEach(function () {\n  NProgress.done();\n  var title = store.getters.tag.label;\n  var i18n = store.getters.tag.meta.i18n;\n  title = router.$avueRouter.generateTitle(title, i18n); //根据当前的标签也获取label的值动态设置浏览器标题\n\n  router.$avueRouter.setTitle(title);\n});",{"version":3,"sources":["E:/blade/blade/ArcherUI/src/permission.js"],"names":["router","store","validatenull","getToken","NProgress","configure","showSpinner","lockPage","getters","website","beforeEach","to","from","next","meta","keepAlive","state","tags","tagList","some","ele","value","fullPath","$keepAlive","start","isLock","path","token","length","dispatch","then","query","src","label","name","$avueRouter","i18n","isTab","commit","params","group","isAuth","afterEach","done","title","tag","generateTitle","setTitle"],"mappings":"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","sourcesContent":["/**\r\n * 全站权限配置\r\n *\r\n */\r\nimport router from './router/router'\r\nimport store from './store'\r\nimport { validatenull } from '@/util/validate'\r\nimport { getToken } from '@/util/auth'\r\nimport NProgress from 'nprogress' // progress bar\r\nimport 'nprogress/nprogress.css' // progress bar style\r\nNProgress.configure({ showSpinner: false });\r\nconst lockPage = store.getters.website.lockPage; //锁屏页\r\nrouter.beforeEach((to, from, next) => {\r\n    //缓冲设置\r\n    if (to.meta.keepAlive === true && store.state.tags.tagList.some(ele => {\r\n        return ele.value === to.fullPath;\r\n    })) {\r\n        to.meta.$keepAlive = true;\r\n    } else {\r\n        NProgress.start()\r\n        if (to.meta.keepAlive === true && validatenull(to.meta.$keepAlive)) {\r\n            to.meta.$keepAlive = true;\r\n        } else {\r\n            to.meta.$keepAlive = false;\r\n        }\r\n    }\r\n    const meta = to.meta || {};\r\n    if (getToken()) {\r\n        if (store.getters.isLock && to.path != lockPage) { //如果系统激活锁屏，全部跳转到锁屏页\r\n            next({ path: lockPage })\r\n        } else if (to.path === '/login') { //如果登录成功访问登录页跳转到主页\r\n            next({ path: '/' })\r\n        } else {\r\n            //如果用户信息为空则获取用户信息，获取用户信息失败，跳转到登录页\r\n            if (store.getters.token.length === 0) {\r\n                store.dispatch('FedLogOut').then(() => {\r\n                    next({ path: '/login' })\r\n                })\r\n            } else {\r\n                const value = to.query.src || to.fullPath;\r\n                const label = to.query.name || to.name;\r\n                const meta = to.meta || router.$avueRouter.meta || {};\r\n                const i18n = to.query.i18n;\r\n                if (meta.isTab !== false && !validatenull(value) && !validatenull(label)) {\r\n                    store.commit('ADD_TAG', {\r\n                        label: label,\r\n                        value: value,\r\n                        params: to.params,\r\n                        query: to.query,\r\n                        meta: (() => {\r\n                            if (!i18n) {\r\n                                return meta\r\n                            }\r\n                            return {\r\n                                i18n: i18n\r\n                            }\r\n                        })(),\r\n                        group: router.$avueRouter.group || []\r\n                    });\r\n                }\r\n                next()\r\n            }\r\n        }\r\n    } else {\r\n        //判断是否需要认证，没有登录访问去登录页\r\n        if (meta.isAuth === false) {\r\n            next()\r\n        } else {\r\n            next('/login')\r\n        }\r\n    }\r\n})\r\n\r\nrouter.afterEach(() => {\r\n    NProgress.done();\r\n    let title = store.getters.tag.label;\r\n    let i18n = store.getters.tag.meta.i18n;\r\n    title = router.$avueRouter.generateTitle(title, i18n)\r\n    //根据当前的标签也获取label的值动态设置浏览器标题\r\n    router.$avueRouter.setTitle(title);\r\n});\r\n"]}]}