{"remainingRequest":"E:\\blade\\blade\\ArcherUI\\node_modules\\babel-loader\\lib\\index.js!E:\\blade\\blade\\ArcherUI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\blade\\blade\\ArcherUI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\blade\\blade\\ArcherUI\\node_modules\\vue-codemirror-lite\\codemirror.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\blade\\blade\\ArcherUI\\node_modules\\vue-codemirror-lite\\codemirror.vue","mtime":1518754515000},{"path":"E:\\blade\\blade\\ArcherUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\blade\\blade\\ArcherUI\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\blade\\blade\\ArcherUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\blade\\blade\\ArcherUI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"E:/blade/blade/ArcherUI/node_modules/@babel/runtime/helpers/esm/typeof\";\n\n//\n//\n//\n//\n//\n//\nvar CodeMirror = require('codemirror/lib/codemirror.js');\n\nrequire('codemirror/lib/codemirror.css');\n\nexport default {\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {\n          mode: 'text/javascript',\n          lineNumbers: true,\n          lineWrapping: true\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      skipNextChangeEvent: false\n    };\n  },\n  ready: function ready() {\n    var _this = this;\n\n    this.editor = CodeMirror.fromTextArea(this.$el.querySelector('textarea'), this.options);\n    this.editor.setValue(this.value);\n    this.editor.on('change', function (cm) {\n      if (_this.skipNextChangeEvent) {\n        _this.skipNextChangeEvent = false;\n        return;\n      }\n\n      _this.value = cm.getValue();\n\n      if (!!_this.$emit) {\n        _this.$emit('change', cm.getValue());\n      }\n    });\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.editor = CodeMirror.fromTextArea(this.$el.querySelector('textarea'), this.options);\n    this.editor.setValue(this.value);\n    this.editor.on('change', function (cm) {\n      if (_this.skipNextChangeEvent) {\n        _this.skipNextChangeEvent = false;\n        return;\n      }\n\n      if (!!_this.$emit) {\n        _this.$emit('change', cm.getValue());\n\n        _this.$emit('input', cm.getValue());\n      }\n    });\n  },\n  watch: {\n    'value': function value(newVal, oldVal) {\n      var editorValue = this.editor.getValue();\n\n      if (newVal !== editorValue) {\n        this.skipNextChangeEvent = true;\n        var scrollInfo = this.editor.getScrollInfo();\n        this.editor.setValue(newVal);\n        this.editor.scrollTo(scrollInfo.left, scrollInfo.top);\n      }\n    },\n    'options': function options(newOptions, oldVal) {\n      if (_typeof(newOptions) === 'object') {\n        for (var optionName in newOptions) {\n          if (newOptions.hasOwnProperty(optionName)) {\n            this.editor.setOption(optionName, newOptions[optionName]);\n          }\n        }\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.editor) {\n      this.editor.toTextArea();\n    }\n  }\n};",{"version":3,"sources":["codemirror.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"vue-codemirror-wrap\">\n    <textarea></textarea>\n  </div>\n</template>\n\n<script>\n  var CodeMirror = require('codemirror/lib/codemirror.js')\n  require('codemirror/lib/codemirror.css')\n  export default {\n    props: {\n      value: {\n        type: String,\n        default: ''\n      },\n      options: {\n        type: Object,\n        default: function () {\n          return {\n            mode: 'text/javascript',\n            lineNumbers: true,\n            lineWrapping: true\n          }\n        }\n      },\n    },\n    data: function () {\n      return {\n        skipNextChangeEvent: false\n      }\n    },\n    ready: function () {\n      var _this = this\n      this.editor = CodeMirror.fromTextArea(this.$el.querySelector('textarea'), this.options)\n      this.editor.setValue(this.value)\n      this.editor.on('change', function(cm) {\n        if (_this.skipNextChangeEvent) {\n          _this.skipNextChangeEvent = false\n          return\n        }\n        _this.value = cm.getValue()\n        if (!!_this.$emit) {\n          _this.$emit('change', cm.getValue())\n        }\n      })\n    },\n    mounted: function () {\n      var _this = this\n      this.editor = CodeMirror.fromTextArea(this.$el.querySelector('textarea'), this.options)\n      this.editor.setValue(this.value)\n      this.editor.on('change', function(cm) {\n        if (_this.skipNextChangeEvent) {\n          _this.skipNextChangeEvent = false\n          return\n        }\n        if (!!_this.$emit) {\n          _this.$emit('change', cm.getValue())\n          _this.$emit('input', cm.getValue())\n        }\n      })\n    },\n    watch: {\n      'value': function (newVal, oldVal) {\n        var editorValue = this.editor.getValue()\n        if (newVal !== editorValue) {\n          this.skipNextChangeEvent = true\n          var scrollInfo = this.editor.getScrollInfo()\n          this.editor.setValue(newVal)\n          this.editor.scrollTo(scrollInfo.left, scrollInfo.top)\n        }\n      },\n      'options': function (newOptions, oldVal) {\n        if (typeof newOptions === 'object') {\n          for (var optionName in newOptions) {\n            if (newOptions.hasOwnProperty(optionName)) {\n              this.editor.setOption(optionName, newOptions[optionName])\n            }\n          }\n        }\n      }\n    },\n    beforeDestroy: function () {\n      if (this.editor) {\n        this.editor.toTextArea()\n      }\n    }\n  }\n</script>\n\n<style>\n  .CodeMirror-code {\n    font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n  }\n</style>\n"],"sourceRoot":"node_modules/vue-codemirror-lite"}]}